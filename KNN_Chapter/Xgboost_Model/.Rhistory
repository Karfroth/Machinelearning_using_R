Sys.setlocale("LC_TIME", "US")
original.date = Sys.Date()
original.date = format(original.date, "%b %d, %Y")
library(xgboost)
Sys.setlocale("LC_TIME", "US")
edited.date = Sys.Date()
edited.date = format(edited.date, "%b %d, %Y")
if(original.date==edited.date){
resently.edited<-"Not yet edited"
} else {
resently.edited<-paste("resently edited at ", edited.date, sep = "")
}
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
require(Matrix)
require(data.table)
head(rawData)
rawData <- data.table(rawData, keep.rownames = F)
library(carrot)
install.packages("carrot")
install.packages("caret")
library(caret)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
rawData[inTrain]
rawData[inTrain,-1]
rawData[inTrain,ID:=NULL]
trainSet<-rawData[inTrain]
testSet<-rawData[-inTrain]
trainSet[,ID:=NULL]
rawData[inTrain,id:=NULL]
rawData[,id:=NULL]
rawData
rawData <- data.table(rawData, keep.rownames = F)
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
rawData <- data.table(rawData, keep.rownames = F)
rawData[,id:=NULL]
rawData
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainLabel <- trainSet$diagnosis
trainFeature <- trainSet[,diagnosis:=NULL]
trainFeature
trainFeature
rawData[,id:=NULL]
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
rawData <- data.table(rawData, keep.rownames = F)
rawData[,id:=NULL]
set.seed(12323)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainSet<-rawData[inTrain]
trainLabel <- trainSet$diagnosis
trainFeature <- trainSet[,diagnosis:=NULL]
trainFeature
trainFeature
trainLabel
testSet<-rawData[-inTrain]
testSet<-rawData[-inTrain]
testLabel <- testSet$diagnosis
testFeature <- trainSet[,diagnosis:=NULL]
testFeature
testFeature
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
rawData <- data.table(rawData, keep.rownames = F)
rawData[,id:=NULL]
set.seed(12323)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainSet<-rawData[inTrain]
trainLabel <- trainSet$diagnosis
trainFeature <- trainSet[,diagnosis:=NULL]
testSet<-rawData[-inTrain]
testLabel <- testSet$diagnosis
testFeature <- testSet[,diagnosis:=NULL]
dtrain <- xgb.DMatrix(data = trainFeature, label = trainLabel)
class(trainFeature)
trainFeature
dtrain <- xgb.DMatrix(data = trainFeature, label = trainLabel)
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
set.seed(12323)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainSet<-rawData[inTrain, -1]
trainLabel <- trainSet$diagnosis
trainFeature <- trainSet[,diagnosis:=NULL]
trainSet
head(trainSet)
trainFeature <- trainSet[,-1]
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
#rawData <- data.table(rawData, keep.rownames = F)
#rawData[,id:=NULL]
set.seed(12323)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainSet<-rawData[inTrain, -1]
trainLabel <- trainSet$diagnosis
trainFeature <- trainSet[,-1]
testSet<-rawData[-inTrain, -1]
testLabel <- testSet$diagnosis
testFeature <- testSet[,-1]
dtrain <- xgb.DMatrix(data = trainFeature, label = trainLabel)
bstSparse <- xgboost(data = trainFeature, label = trainLabel, max.depth = 2, eta = 1, nthread = 2, nround = 2, objective = "binary:logistic")
data(agaricus.train, package='xgboost')
data(agaricus.test, package='xgboost')
train <- agaricus.train
test <- agaricus.test
str(train)
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
rawData <- data.table(rawData, keep.rownames = F)
rawData[,id:=NULL]
set.seed(12323)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainSet<-rawData[inTrain]
trainLabel <- trainSet$diagnosis
trainLabel
trainSet
trainLabel
trainLabel <- trainLabel == "B"
trainLabel
dtrain <- xgb.DMatrix(data = trainFeature, label = trainLabel)
sparse_matrix <- sparse.model.matrix(data = trainFeature)
train$data
sparse_matrix <- sparse.model.matrix(diagnosis~.-1, data = trainSet)
dtrain <- xgb.DMatrix(data = sparse_matrix, label = trainLabel)
sparse_matrix <- sparse.model.matrix(diagnosis~., data = trainSet)
sparse_matrix <- sparse.model.matrix(diagnosis~.-1, data = trainSet)
dtrain <- xgb.DMatrix(data = sparse_matrix, label = trainLabel)
bst <- xgboost(data = dtrain, max.depth = 4,
eta = 1, nthread = 2, nround = 10, objective = "binary:logistic")
pred <- predict(bst, testFeature)
test_matrix <- sparse.model.matrix(diagnosis~.-1, data = testSet)
pred <- predict(bst, testFeature)
pred <- predict(bst, test_matrix)
prediction <- as.numeric(pred > 0.5)
prediction
testLabel
testLabel <- testLabel == "B"
testLabel
table(testLabel, prediction)
?sparse_matrix
?xgboost
?sparse.model.matrix
model.Matrix(diagnosis~.-1, data=trainSet)
library(MatrixModels)
model.Matrix(diagnosis~.-1, data=trainSet)
modelMatrix <- model.Matrix(diagnosis~.-1, data=trainSet)
dtrain <- xgb.DMatrix(data = modelMatrix, label = trainLabel)
dtrain <- xgb.DMatrix(data = sparse_matrix, label = trainLabel)
sparse.model.matrix(data = testFeature)
sparse.model.matrix(~, data = testFeature)
sparse.model.matrix(data = testFeature)
testFeature
data.matrix(testFeature)
xgb.DMatrix(data = data.matrix(trainFeature), label = trainLabel)
library(xgboost)
require(Matrix)
require(data.table)
library(caret)
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
rawData <- data.table(rawData, keep.rownames = F)
rawData[,id:=NULL]
set.seed(12323)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainSet<-rawData[inTrain]
trainLabel <- trainSet$diagnosis == "B"
trainFeature <- trainSet[,diagnosis:=NULL]
train_matrix <- data.matrix(trainFeature)
testSet<-rawData[-inTrain]
testLabel <- testSet$diagnosis == "B"
testFeature <- testSet[,diagnosis:=NULL]
test_matrix <- data.matrix(testFeature)
dtrain <- xgb.DMatrix(data = train_matrix, label = trainLabel)
bst <- xgboost(data = dtrain, max.depth = 4,
eta = 1, nthread = 2, nround = 10, objective = "binary:logistic")
predict(bst, test_matrix)
bst <- xgboost(data = dtrain, max.depth = 5,
eta = 2, nthread = 2, nround = 50, objective = "binary:logistic")
predict(bst, test_matrix)
prediction <- predict(bst, test_matrix)
table(prediction>=0.5, testLable)
table(prediction>=0.5, testLabel)
library(xgboost)
require(Matrix)
require(data.table)
library(caret)
# Data Load
rawData<- read.csv("Data/wisc_bc_data.csv", header = TRUE, stringsAsFactors = TRUE)
dataDim<-dim(rawData)
rawData <- data.table(rawData, keep.rownames = F)
rawData[,id:=NULL]
set.seed(12323)
inTrain<-createDataPartition(rawData$diagnosis, p=0.8, list=FALSE)
trainSet<-rawData[inTrain]
testSet<-rawData[-inTrain]
# Make data matrix and label for train and test set
trainLabel <- trainSet$diagnosis == "B"
trainFeature <- trainSet[,diagnosis:=NULL]
train_matrix <- data.matrix(trainFeature)
testLabel <- testSet$diagnosis == "B"
testFeature <- testSet[,diagnosis:=NULL]
test_matrix <- data.matrix(testFeature)
# Feature and label for xgboost
dtrain <- xgb.DMatrix(data = train_matrix, label = trainLabel)
testLabel
bst <- xgboost(data = dtrain, max.depth = 5,
eta = 2, nthread = 2, nround = 50, objective = "binary:logistic")
expecting<- predict(bst, testLabel)
expecting<- predict(bst, testLabel)
trainLabel
expecting<- predict(bst, test_matrix)
expecting
install.packages("e1071")
gc()
